package com.aurumfi.token;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * AurumFi Token Implementation
 * ERC-20 compatible token for exchange listing
 */
public class AurumToken {

    // Token Metadata
    public static final String NAME = "AurumFi";
    public static final String SYMBOL = "AUR";
    public static final int DECIMALS = 8;
    public static final BigDecimal TOTAL_SUPPLY = new BigDecimal("21000000"); // 21M tokens like Bitcoin

    // Storage
    private final Map<String, BigDecimal> balances = new ConcurrentHashMap<>();
    private final Map<String, Map<String, BigDecimal>> allowances = new ConcurrentHashMap<>();
    private BigDecimal totalSupply;
    private final String owner;

    // Events (for exchange integration)
    public interface TokenEventListener {
        void onTransfer(String from, String to, BigDecimal value);
        void onApproval(String owner, String spender, BigDecimal value);
        void onMint(String to, BigDecimal value);
        void onBurn(String from, BigDecimal value);
    }

    private TokenEventListener eventListener;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç–æ–∫–µ–Ω–∞.
     * @param ownerAddress –ê–¥—Ä–µ—Å–∞ –≤–ª–∞—Å–Ω–∏–∫–∞ (–∑–∞—Å–Ω–æ–≤–Ω–∏–∫–∞) —Ç–æ–∫–µ–Ω–∞.
     */
    public AurumToken(String ownerAddress) {
        if (ownerAddress == null || ownerAddress.isEmpty()) {
            throw new IllegalArgumentException("Owner address cannot be null or empty");
        }
        this.owner = ownerAddress;
        this.totalSupply = BigDecimal.ZERO;

        // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –≤–∏–ø—É—Å–∫ —Ç–æ–∫–µ–Ω—ñ–≤ –∑–∞—Å–Ω–æ–≤–Ω–∏–∫—É
        mint(ownerAddress, new BigDecimal("1000000")); // 1M tokens to founder

        System.out.println("ü™ô AurumFi Token deployed:");
        System.out.println("   Name: " + NAME);
        System.out.println("   Symbol: " + SYMBOL);
        System.out.println("   Decimals: " + DECIMALS);
        System.out.println("   Owner: " + ownerAddress);
    }

    // ERC-20 Standard Functions

    /**
     * –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–ø—É—â–µ–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤.
     * @return totalSupply
     */
    public BigDecimal totalSupply() {
        return totalSupply;
    }

    /**
     * –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–∞ –≤–∫–∞–∑–∞–Ω—ñ–π –∞–¥—Ä–µ—Å—ñ.
     * @param account –∞–¥—Ä–µ—Å–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @return –±–∞–ª–∞–Ω—Å
     */
    public BigDecimal balanceOf(String account) {
        if (account == null) return BigDecimal.ZERO;
        return balances.getOrDefault(account, BigDecimal.ZERO);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ –∞–¥—Ä–µ—Å–∏.
     * @param address –∞–¥—Ä–µ—Å–∞
     * @return true, —è–∫—â–æ –∞–¥—Ä–µ—Å–∞ –≤–∞–ª—ñ–¥–Ω–∞
     */
    private boolean isValidAddress(String address) {
        return address != null && address.length() >= 10 &&
                (address.startsWith("AUR_") || address.startsWith("EXCHANGE_"));
    }

    /**
     * –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω—ñ–≤ –≤—ñ–¥ –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É (owner) –¥–æ –∞–¥—Ä–µ—Å–∏ to.
     * @param to –∞–¥—Ä–µ—Å–∞—Ç
     * @param value –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
     * @return true, —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ
     */
    public boolean transfer(String to, BigDecimal value) {
        return transfer(owner, to, value);
    }

    /**
     * –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω—ñ–≤ –≤—ñ–¥ from –¥–æ to.
     * @param from –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫
     * @param to –æ—Ç—Ä–∏–º—É–≤–∞—á
     * @param value –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
     * @return true, —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ
     */
    public boolean transfer(String from, String to, BigDecimal value) {
        if (value == null || value.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Transfer value must be positive");
        }

        if (!isValidAddress(from) || !isValidAddress(to)) {
            throw new IllegalArgumentException("Invalid address format");
        }

        BigDecimal fromBalance = balanceOf(from);
        if (fromBalance.compareTo(value) < 0) {
            throw new IllegalArgumentException("Insufficient balance");
        }

        // –í–∏–∫–æ–Ω–∞—Ç–∏ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä
        balances.put(from, fromBalance.subtract(value));
        balances.put(to, balanceOf(to).add(value));

        // –í–∏–∫–ª–∏–∫ –ø–æ–¥—ñ—ó
        if (eventListener != null) {
            eventListener.onTransfer(from, to, value);
        }

        System.out.println("üí∏ Transfer: " + value + " AUR from " + from + " to " + to);
        return true;
    }

    /**
     * –ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ–∑–≤–æ–ª–µ–Ω—É —Å—É–º—É, —è–∫—É spender –º–æ–∂–µ –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏ –≤—ñ–¥ —ñ–º–µ–Ω—ñ owner.
     * @param owner –≤–ª–∞—Å–Ω–∏–∫ —Ç–æ–∫–µ–Ω—ñ–≤
     * @param spender —Ç–æ–π, —Ö—Ç–æ –æ—Ç—Ä–∏–º–∞–≤ –¥–æ–∑–≤—ñ–ª
     * @return —Å—É–º–∞ –¥–æ–∑–≤–æ–ª—É
     */
    public BigDecimal allowance(String owner, String spender) {
        if (owner == null || spender == null) return BigDecimal.ZERO;
        return allowances.getOrDefault(owner, new HashMap<>()).getOrDefault(spender, BigDecimal.ZERO);
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –¥–æ–∑–≤—ñ–ª spender –≤–∏—Ç—Ä–∞—á–∞—Ç–∏ value —Ç–æ–∫–µ–Ω—ñ–≤ –≤—ñ–¥ —ñ–º–µ–Ω—ñ owner.
     * @param owner –≤–ª–∞—Å–Ω–∏–∫ —Ç–æ–∫–µ–Ω—ñ–≤
     * @param spender –∞–¥—Ä–µ—Å–∞—Ç –¥–æ–∑–≤–æ–ª—É
     * @param value –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
     * @return true, —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ
     */
    public boolean approve(String owner, String spender, BigDecimal value) {
        if (owner == null || spender == null) {
            throw new IllegalArgumentException("Owner and spender addresses cannot be null");
        }
        if (value == null || value.compareTo(BigDecimal.ZERO) < 0) {
            throw new IllegalArgumentException("Approval value cannot be negative");
        }

        allowances.computeIfAbsent(owner, k -> new HashMap<>()).put(spender, value);

        if (eventListener != null) {
            eventListener.onApproval(owner, spender, value);
        }

        System.out.println("‚úÖ Approval: " + owner + " approved " + spender + " for " + value + " AUR");
        return true;
    }

    /**
     * –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω—ñ–≤ –≤—ñ–¥ from –¥–æ to –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –¥–æ–∑–≤–æ–ª—É.
     * @param from –≤–ª–∞—Å–Ω–∏–∫ —Ç–æ–∫–µ–Ω—ñ–≤
     * @param to –æ—Ç—Ä–∏–º—É–≤–∞—á
     * @param value –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
     * @return true, —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ
     */
    public boolean transferFrom(String from, String to, BigDecimal value) {
        if (from == null || to == null || value == null) {
            throw new IllegalArgumentException("Addresses and value cannot be null");
        }
        if (value.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Transfer value must be positive");
        }

        BigDecimal currentAllowance = allowance(from, owner);
        if (currentAllowance.compareTo(value) < 0) {
            throw new IllegalArgumentException("Transfer amount exceeds allowance");
        }

        // –û–Ω–æ–≤–∏—Ç–∏ –¥–æ–∑–≤—ñ–ª
        approve(from, owner, currentAllowance.subtract(value));

        // –í–∏–∫–æ–Ω–∞—Ç–∏ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä
        return transfer(from, to, value);
    }

    // Exchange-specific functions

    /**
     * –í–∏–ø—É—Å–∫ –Ω–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ (–¥–æ–∑–≤–æ–ª–µ–Ω–æ –ª–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫—É).
     * @param to –∞–¥—Ä–µ—Å–∞—Ç
     * @param value –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
     * @return true, —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ
     */
    public boolean mint(String to, BigDecimal value) {
        if (to == null || value == null) {
            throw new IllegalArgumentException("Address and value cannot be null");
        }
        if (!owner.equals(owner)) { // –¶—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞, –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏–∂—á–µ
            throw new IllegalArgumentException("Only owner can mint tokens");
        }
        // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–ª–∞—Å–Ω–∏–∫–∞: –º–µ—Ç–æ–¥ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –≤—ñ–¥ —ñ–º–µ–Ω—ñ –≤–ª–∞—Å–Ω–∏–∫–∞, —Ç–æ–º—É —Ç—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–∫–ª–∏–∫—É –∞–±–æ —ñ–Ω—à—É –ª–æ–≥—ñ–∫—É.
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –ø—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ —Ü–µ–π –º–µ—Ç–æ–¥ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ª–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫–æ–º.

        if (value.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Mint value must be positive");
        }

        if (totalSupply.add(value).compareTo(TOTAL_SUPPLY) > 0) {
            throw new IllegalArgumentException("Total supply exceeded");
        }

        totalSupply = totalSupply.add(value);
        balances.put(to, balanceOf(to).add(value));

        if (eventListener != null) {
            eventListener.onMint(to, value);
        }

        System.out.println("üî® Minted: " + value + " AUR to " + to);
        return true;
    }

    /**
     * –°–ø–∞–ª—é–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∑ –∞–¥—Ä–µ—Å–∏ from.
     * @param from –∞–¥—Ä–µ—Å–∞
     * @param value –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
     * @return true, —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ
     */
    public boolean burn(String from, BigDecimal value) {
        if (from == null || value == null) {
            throw new IllegalArgumentException("Address and value cannot be null");
        }
        if (value.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Burn value must be positive");
        }

        BigDecimal balance = balanceOf(from);
        if (balance.compareTo(value) < 0) {
            throw new IllegalArgumentException("Burn amount exceeds balance");
        }

        balances.put(from, balance.subtract(value));
        totalSupply = totalSupply.subtract(value);

        if (eventListener != null) {
            eventListener.onBurn(from, value);
        }

        System.out.println("üî• Burned: " + value + " AUR from " + from);
        return true;
    }

    // Exchange deposit/withdrawal functions

    /**
     * –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω—É –∞–¥—Ä–µ—Å—É –¥–µ–ø–æ–∑–∏—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±—ñ—Ä–∂—ñ.
     * @param exchangeUser Id —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±—ñ—Ä–∂—ñ
     * @return —É–Ω—ñ–∫–∞–ª—å–Ω–∞ –∞–¥—Ä–µ—Å–∞ –¥–µ–ø–æ–∑–∏—Ç—É
     */
    public String generateDepositAddress(String exchangeUserId) {
        if (exchangeUserId == null) {
            throw new IllegalArgumentException("Exchange user ID cannot be null");
        }
        return "AUR_DEP_" + Math.abs(exchangeUserId.hashCode());
    }


    /**
     * –û–±—Ä–æ–±–∫–∞ –¥–µ–ø–æ–∑–∏—Ç—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –∞–¥—Ä–µ—Å—É –±—ñ—Ä–∂—ñ.
     * @param userAddress –∞–¥—Ä–µ—Å–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param exchangeAddress –∞–¥—Ä–µ—Å–∞ –±—ñ—Ä–∂—ñ
     * @param amount –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
     * @return true, —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ
     */
    public boolean processExchangeDeposit(String userAddress, String exchangeAddress, BigDecimal amount) {
        try {
            return transfer(userAddress, exchangeAddress, amount);
        } catch (Exception e) {
            System.err.println("‚ùå Deposit failed: " + e.getMessage());
            return false;
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∑ –±—ñ—Ä–∂—ñ –Ω–∞ –∞–¥—Ä–µ—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
     * @param exchangeAddress –∞–¥—Ä–µ—Å–∞ –±—ñ—Ä–∂—ñ
     * @param userAddress –∞–¥—Ä–µ—Å–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param amount –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤
     * @return true, —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ
     */
    public boolean processExchangeWithdrawal(String exchangeAddress, String userAddress, BigDecimal amount) {
        try {
            return transfer(exchangeAddress, userAddress, amount);
        } catch (Exception e) {
            System.err.println("‚ùå Withdrawal failed: " + e.getMessage());
            return false;
        }
    }

    // Utility functions

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ª—É—Ö–∞—á–∞ –ø–æ–¥—ñ–π —Ç–æ–∫–µ–Ω–∞.
     * @param listener –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π
     */
    public void setEventListener(TokenEventListener listener) {
        this.eventListener = listener;
    }

    // Exchange metadata for listing

    /**
     * –ú–µ—Ç–∞–¥–∞–Ω—ñ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±—ñ—Ä–∂–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∏–Ω–≥—É.
     * @return –∫–∞—Ä—Ç–∞ –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
     */
    public Map<String, Object> getTokenMetadata() {
        Map<String, Object> metadata = new HashMap<>();
        metadata.put("name", NAME);
        metadata.put("symbol", SYMBOL);
        metadata.put("decimals", DECIMALS);
        metadata.put("totalSupply", totalSupply.toPlainString());
        metadata.put("contractType", "ERC20_COMPATIBLE");
        metadata.put("network", "AurumFi");
        metadata.put("website", "https://aurumfi.com");
        metadata.put("whitepaper", "https://aurumfi.com/whitepaper.pdf");
        metadata.put("github", "https://github.com/hryhoriistruk/AurumFi");
        return metadata;
    }

    // Price oracle integration placeholder

    /**
     * –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞).
     * @return —Ü—ñ–Ω–∞ –≤ USD
     */
    public BigDecimal getCurrentPrice() {
        // –¢—É—Ç –º–æ–∂–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ –æ—Ä–∞–∫—É–ª–∏ —Ü—ñ–Ω —É –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ
        return new BigDecimal("0.01"); // $0.01 placeholder
    }

    /**
     * –†–∏–Ω–∫–æ–≤–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞.
     * @return —Ä–∏–Ω–∫–æ–≤–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è
     */
    public BigDecimal getMarketCap() {
        return totalSupply.multiply(getCurrentPrice());
    }
}
